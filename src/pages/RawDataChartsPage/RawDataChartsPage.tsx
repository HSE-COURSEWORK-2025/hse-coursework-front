import { useState, useEffect } from "react";
import {
  Container,
  Typography,
  Box,
} from "@mui/material";
import { CustomChart } from "../../components/customChart/CustomChart";
import axios from "axios";
import { useSnackbar } from "notistack";
import React from "react";
import {
  Chart as ChartJS,
  LinearScale,
  PointElement,
  LineElement,
  TimeScale,
  Tooltip,
  Legend,
} from "chart.js";
import "chartjs-adapter-date-fns"; // —á—Ç–æ–±—ã Chart.js –ø–æ–Ω–∏–º–∞–ª Date()

ChartJS.register(
  LinearScale,
  PointElement,
  LineElement,
  TimeScale,
  Tooltip,
  Legend
);

// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è —É–¥–æ–±–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:
interface MyDataPoint {
  x: Date;
  y: number;
}

// –¢–∏–ø –¥–ª—è —Å—Ç–µ–π—Ç–∞: —É –Ω–∞—Å —Ç—Ä–∏ –º–∞—Å—Å–∏–≤–∞ MyDataPoint
type ChartDataType = {
  pulse: MyDataPoint[];
  oxygen: MyDataPoint[];
  sleep: MyDataPoint[];
};

type BackendDataElement = {
  X: string; // ISO-—Å—Ç—Ä–æ–∫–∞
  Y: number;
};

const API_URL = process.env.REACT_APP_DATA_COLLECTION_API_URL || "";
const DATA_TYPES = {
  pulse: "HeartRateRecord",
  oxygen: "BloodOxygenData",
  sleep: "SleepSessionTimeData",
};

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞ ({ X: string; Y: number }) ‚Üí MyDataPoint ({ x: Date; y: number })
const transformData = (backendData: BackendDataElement[]): MyDataPoint[] => {
  return backendData.map((item) => ({
    x: new Date(item.X),
    y: Number(item.Y),
  }));
};

interface RawDataChartsPageProps {
  onLoaded?: () => void;
}

export const RawDataChartsPage: React.FC<RawDataChartsPageProps> = ({
  onLoaded,
}) => {
  const [chartData, setChartData] = useState<ChartDataType>({
    pulse: [],
    oxygen: [],
    sleep: []
  });

  const [loadingMap, setLoadingMap] = useState<Record<keyof ChartDataType, boolean>>({
    pulse: true,
    oxygen: true,
    sleep: true
  });

  const { enqueueSnackbar } = useSnackbar();
  const [forceLoading, setForceLoading] = useState(false);

  useEffect(() => {
    Object.entries(DATA_TYPES).forEach(([key, type]) => {
      // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å—ã—Ä—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const dataCategory = key === 'sleep' ? 'processed_data' : 'raw_data';
      axios
        .get<BackendDataElement[]>(
          `${API_URL}/api/v1/get_data/${dataCategory}/${type}`
        )
        .then((response) => {
          const data = transformData(response.data);
          setChartData((prev) => ({ ...prev, [key]: data }));
        })
        .catch(() => {
          enqueueSnackbar(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${key}`, {
            variant: "error",
          });
        })
        .finally(() => {
          setLoadingMap((prev) => {
            const updated = { ...prev, [key]: false };
            if (Object.values(updated).every((v) => v === false)) {
              onLoaded?.();
            }
            return updated;
          });
        });
    });
  }, [enqueueSnackbar, onLoaded]);

  // –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  const getInitialRange = (data: MyDataPoint[]) => {
    if (data.length === 0) return { min: 0, max: 0 };
    const xValues = data.map((d) => d.x.getTime());
    return {
      min: Math.min(...xValues),
      max: Math.max(...xValues),
    };
  };

  const selectionColor = "#FF9800";

  const chartConfigs: Record<keyof ChartDataType, { title: string; unit: string; color: string }> = {
    pulse: {
      title: "–ü—É–ª—å—Å",
      unit: "—É–¥/–º–∏–Ω",
      color: "#1565C0",
    },
    oxygen: {
      title: "–£—Ä–æ–≤–µ–Ω—å –∫–∏—Å–ª–æ—Ä–æ–¥–∞ –≤ –∫—Ä–æ–≤–∏",
      unit: "SpO2%",
      color: "#00897B",
    },
    sleep: {
      title: "–í—Ä–µ–º—è —Å–Ω–∞",
      unit: "—á–∞—Å—ã",
      color: "#00695C",
    },
  };

  // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Å —Ç–µ–º, —á—Ç–æ –∂–¥–µ—Ç CustomChart
  type ChartDataPoint = { x: string; y: number };

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      <Typography variant="h4" gutterBottom>
        üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      </Typography>

      <Box sx={{ display: "flex", flexWrap: "wrap", gap: 2 }}>
        {Object.entries(DATA_TYPES).map(([key]) => {
          const chartKey = key as keyof ChartDataType;
          const config = chartConfigs[chartKey];
          const rawData: MyDataPoint[] = chartData[chartKey];

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ MyDataPoint (Date) ‚Üí ChartDataPoint (ISO-—Å—Ç—Ä–æ–∫–∞)
          const dataForChart: ChartDataPoint[] = rawData.map((dp) => ({
            x: dp.x.toISOString(),
            y: dp.y,
          }));

          return (
            <Box
              key={key}
              sx={{
                flex: "1 1 calc(50% - 16px)",
                minHeight: 300,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <CustomChart
                title={config.title}
                data={dataForChart}                   
                unit={config.unit}
                verticalLines={[]}
                highlightIntervals={[]}
                initialRange={getInitialRange(rawData)}
                lineColor={config.color}
                selectionColor={selectionColor}
                showStatus={false}
                simulateLoading={forceLoading || loadingMap[chartKey]}
              />
            </Box>
          );
        })}
      </Box>
    </Container>
  );
};
