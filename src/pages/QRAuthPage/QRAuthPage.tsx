import React, { useEffect, useState } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
  Stack,
} from "@mui/material";
import { motion } from "framer-motion";
import axios from "axios";

const API_URL = process.env.REACT_APP_AUTH_API_URL || "";

// –¢–∏–ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Blob –∏–∑ –æ—Ç–≤–µ—Ç–∞
type QrResponse = Blob;

export const QRAuthPage: React.FC = () => {
  const [qrCodeUrl, setQrCodeUrl] = useState<string>("");
  const [appQrCodeUrl, setAppQrCodeUrl] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [appQrError, setAppQrError] = useState<string | null>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const fetchAuthQRCode = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const response = await axios.get<QrResponse>(
        `${API_URL}/api/v1/qr_auth/get_auth_qr_code`,
        { responseType: "blob" },
      );
      const blobUrl = URL.createObjectURL(response.data);
      setQrCodeUrl(blobUrl);
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR –∫–æ–¥–∞");
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const fetchAppQRCode = async () => {
    try {
      setAppQrError(null);
      const response = await axios.get<QrResponse>(
        `${API_URL}/api/v1/qr_auth/get_app_qr_code`,
        { responseType: "blob" },
      );
      const blobUrl = URL.createObjectURL(response.data);
      setAppQrCodeUrl(blobUrl);
    } catch (err: any) {
      setAppQrError(err.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
    }
  };

  // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–∞ –∫–æ–¥–∞
  useEffect(() => {
    fetchAuthQRCode();
    fetchAppQRCode();
  }, []);

  return (
    <Container>
      <Container maxWidth="md" sx={{ py: 4 }}>
        <Typography variant="h4" gutterBottom>
          üì≤ –í—ã–≥—Ä—É–∑–∫–∞ —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        </Typography>
      </Container>
      <Container
        maxWidth="md"
        sx={{
          minHeight: "67vh",
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          p: 3,
          backgroundColor: "background.default",
        }}
      >
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          style={{ width: "100%" }}
        >
          <Box
            sx={{
              backgroundColor: "background.paper",
              borderRadius: 2,
              boxShadow: 3,
              p: 4,
              textAlign: "center",
            }}
          >
            <Typography
              variant="subtitle1"
              color="text.secondary"
              sx={{ mb: 3 }}
            >
              –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ <strong>–ª–µ–≤—ã–π</strong> QR-–∫–æ–¥ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
              –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–≥–æ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
              –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <strong>–ø—Ä–∞–≤—ã–π</strong> QR-–∫–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
            </Typography>

            <Stack
              direction="row"
              spacing={4}
              justifyContent="center"
              sx={{ mb: 4 }}
            >
              <Box>
                <Typography variant="bodyMedium" sx={{ mb: 1 }}>
                  –î–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                </Typography>
                {isLoading ? (
                  <CircularProgress />
                ) : error ? (
                  <Typography color="error">{error}</Typography>
                ) : (
                  <Box
                    component="img"
                    src={qrCodeUrl}
                    alt="QR Code –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
                    sx={{
                      width: 250,
                      height: 250,
                      borderRadius: 2,
                      boxShadow: 2,
                    }}
                  />
                )}
              </Box>

              <Box>
                <Typography variant="bodyMedium" sx={{ mb: 1 }}>
                  –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                </Typography>
                {appQrError ? (
                  <Typography color="error">{appQrError}</Typography>
                ) : appQrCodeUrl ? (
                  <Box
                    component="img"
                    src={appQrCodeUrl}
                    alt="QR Code –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                    sx={{
                      width: 250,
                      height: 250,
                      borderRadius: 2,
                      boxShadow: 2,
                    }}
                  />
                ) : (
                  <CircularProgress />
                )}
              </Box>
            </Stack>

            <Button
              variant="contained"
              onClick={fetchAuthQRCode}
              sx={{
                textTransform: "none",
                backgroundColor: "#16a180",
                color: "#ffffff",
                "&:hover": {
                  backgroundColor: "#13876e", // —á—É—Ç—å –±–æ–ª–µ–µ —Ç—ë–º–Ω—ã–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è
                },
              }}
            >
              –û–±–Ω–æ–≤–∏—Ç—å QR –∫–æ–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            </Button>
          </Box>
        </motion.div>
      </Container>
    </Container>
  );
};
